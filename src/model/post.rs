use super::super::model::preview::Preview;

use serde::{Deserialize, Serialize};
use serde_json::Value;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct RedditPost {
    pub kind: String,
    pub data: RedditPostData,
}

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct RedditPostData {
    pub approved_at_utc: Option<String>,
    pub subreddit: String,
    pub selftext: String,
    pub author_fullname: String,
    pub saved: bool,
    pub mod_reason_title: Option<String>,
    pub gilded: usize,
    pub clicked: bool,
    pub title: String,
    pub link_flair_richtext: Vec<String>,
    pub subreddit_name_repfixed: String,
    pub hidden: bool,
    pub pwls: usize,
    pub link_flair_css_class: String,
    pub downs: usize,
    pub thumbnail_height: Option<usize>,
    pub top_awarded_type: Option<String>,
    pub hide_score: bool,
    pub name: String,
    pub quarantine: bool,
    pub link_flair_text_color: String,
    pub upvote_ratio: f32,
    pub author_flair_background_color: String,
    pub subreddit_type: String,
    pub ups: usize,
    pub total_awards_received: usize,
    #[serde(skip_deserializing, skip_serializing)]
    pub media_embed: String,
    pub thumbnail_width: Option<usize>,
    pub author_flair_template_id: Option<String>,
    pub is_original_content: String,
    pub user_reports: Vec<String>,
    #[serde(skip_deserializing, skip_serializing)]
    pub gildings: String,
    pub post_hint: String,
    pub content_categories: Option<String>,
    pub is_self: bool,
    pub mod_note: Option<String>,
    pub created: String,
    pub link_flair_type: String,
    pub wls: usize,
    #[serde(skip_deserializing, skip_serializing)]
    pub removed_by_category: Option<String>,
    pub banned_by: Option<String>,
    pub author_flair_type: String,
    pub domain: String,
    pub allow_live_comments: bool,
    pub selftext_html: String,
    pub likes: Option<String>,
    pub suggested_sort: String,
    pub banned_at_utc: Option<bool>,
    pub view_count: Option<usize>,
    pub archived: bool,
    pub no_follow: bool,
    pub is_crosspostable: bool,
    pub pinned: bool,
    pub over_18: bool,
    #[serde(skip_deserializing, skip_serializing)]
    pub preview: Preview,
    pub all_awardings: Vec<String>,
    pub awarders: Vec<String>,
    pub media_only: bool,
    pub link_flair_template_id: String,
    pub can_gild: bool,
    pub spoiler: bool,
    pub locked: bool,
    pub author_flair_text: String,
    pub treatment_tags: Vec<String>,
    pub removed_by: Option<String>,
    pub num_reports: Option<usize>,
    pub distinguished: Option<String>,
    pub subreddit_id: String,
    pub mod_reason_by: Option<String>,
    pub removal_reason: Option<String>,
    pub link_flair_background_color: String,
    pub id: String,
    pub is_robot_indexable: bool,
    pub report_reasons: Option<String>,
    pub author: String,
    pub discussion_type: Option<String>,
    pub num_comments: usize,
    pub send_replies: bool,
    pub whitelist_status: String,
    pub contest_mode: bool,
    pub mod_reports: Vec<String>,
    pub author_patreon_flair: bool,
    pub author_flair_text_color: String,
    pub permalink: String,
    pub parent_whitelist_status: String,
    pub stickied: bool,
    pub url: String,
    pub subreddit_subscribers: usize,
    pub created_utc: String,
    pub num_crossposts: usize,
    pub media: Option<String>,
    pub is_video: bool,
}
